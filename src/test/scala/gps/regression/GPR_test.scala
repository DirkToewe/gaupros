package gps.regression

import gps.diff.{gradient, jacobian}
import gps.doe.lhs
import gps.linalg._
import gps.kernel._
import gps.regression.gpr.LikelihoodFunction
import utest.{TestSuite, TestableSymbol}

import scala.util.Random

object GPR_test extends TestSuite
{
  override def tests = this{
    TestableSymbol('referenceExample1) {
      val x = Array(-1.00249842861,-0.987835338875,-0.970833317381,-0.953183024806,-0.938887133433,-0.921066742041,-0.908011097894,-0.88476550882,-0.871571500759,-0.862306832266,-0.843713647573,-0.825422559795,-0.814960021771,-0.790198964775,-0.780123623426,-0.760739544966,-0.744943637,-0.733740035985,-0.717416231606,-0.699902801805,-0.682307907887,-0.672568940625,-0.655767274039,-0.636008200964,-0.622050936888,-0.609673819662,-0.59146308345,-0.57796120488,-0.558722315973,-0.539817630414,-0.530863507138,-0.507009351982,-0.496846040261,-0.480272891977,-0.464456997934,-0.453902451945,-0.430638424476,-0.412143779109,-0.405114146632,-0.389746616486,-0.37139281696,-0.352302158066,-0.343801563988,-0.3242075689,-0.311719902094,-0.288300933491,-0.277167777294,-0.257716286407,-0.244186571367,-0.223381917797,-0.209071203359,-0.195693046381,-0.180424997591,-0.160132397446,-0.152181373896,-0.138956662918,-0.122424723704,-0.0977534635113,-0.0816434708728,-0.07095557449,-0.0567880737884,-0.0370303662159,-0.0287569893714,-0.00514484852866,0.00967352006522,0.0203721315034,0.0411177391346,0.0594343559219,0.0673188181182,0.0909247067336,0.100518193213,0.120213106772,0.131395804077,0.149805340162,0.16196816782,0.180764787111,0.196314588124,0.211507240062,0.231411290645,0.244025178423,0.262193678719,0.278666908479,0.289779780575,0.311387438581,0.325069685041,0.342753255968,0.353493000829,0.369737701831,0.390067477158,0.402976888251,0.41766750093,0.430315073649,0.453506602822,0.465190867438,0.483016813952,0.493292905081,0.511073582471,0.526447386879,0.543419521217,0.555122341166,0.5767312662,0.585592542941,0.603504912568,0.624529574762,0.6423539087,0.654735999007,0.668319981427,0.688755026641,0.705961488647,0.714387088755,0.731130367561,0.750120281252,0.762278419719,0.774613386877,0.793691775264,0.810863609952,0.822028714946,0.846876907135,0.860635870044,0.876876235802,0.885527033971,0.900653331981,0.918738190293,0.933076196768,0.950006818704,0.970416521607,0.984054788777,1.00458276526)
      val y =   Vec(-0.0563206340763,0.194456632386,0.0340413396829,-0.274359011117,-0.48901541127,-0.2751049364,-0.932860368413,-0.519220624813,-1.27114805775,-1.26569544563,-0.72438753982,-1.57839977237,-1.20711350309,-1.76014951697,-1.36252621735,-1.68294619631,-1.32969620909,-2.03978344969,-1.5117635387,-2.02986754028,-1.88673718113,-2.24175322438,-1.91715809574,-1.41883532243,-1.48738949225,-2.37084267554,-1.87879351168,-1.57184487632,-2.09648910903,-2.03623223676,-1.95649443071,-2.28914184706,-2.26930202326,-1.60986326178,-2.04047776077,-1.7870769589,-1.53476865906,-1.26895946378,-1.39819767464,-1.79275488061,-1.38680249292,-1.48541599505,-1.36176760187,-1.45038677475,-1.56222363964,-1.77110542406,-0.812450252394,-1.25933585317,-1.28893236669,-0.719617381648,-1.2261102914,-0.819514252329,-0.884311167584,-0.858372167358,-1.08856566766,-0.883196835165,-0.732138913731,-0.0354398408081,0.0485937265931,-0.382006718516,-0.566067485504,-0.3879758077,0.1597150888,0.202532020875,0.333112659429,0.193471446572,0.0499650709967,0.525802167855,0.554624083917,0.169095120787,0.145396400605,0.544943223892,0.421522051197,0.799049551434,0.46806203034,0.549961128479,1.42720222866,0.777186781337,0.877851684024,0.928212109595,0.934771941851,0.847943222332,1.1690684932,1.71847535388,1.26539199521,1.02204223712,1.13223698778,1.23087973107,2.106885327,2.17984761682,1.4745283746,1.51962594758,1.59280332837,2.16552931448,2.23308616033,2.20587827465,1.56474268118,1.99900275625,2.23559499389,1.7888206796,2.38637551271,2.32980661194,2.30679936445,1.71524624333,1.76926795826,1.79651855374,1.52295964701,1.5653272495,2.04396507502,2.16111341393,1.70058127181,1.82651957264,1.82873918351,1.53968454316,1.26691290921,0.981420810007,1.37899817079,1.16427326443,0.807024599125,1.12395300203,0.712687280979,0.365412458577,1.00550659059,0.525139816514,0.242349186927,0.649273189011,-0.157350164918,-0.283258837216)

      val k = Noise('var_noise) + 'var_func * Exp( - AbsDelta.pow(2) / 'var_cov )

      val y_shift  = -0.000453
      val logp_marginal= GPR.logp_marginal(x,y, y_shift, k)
      val logp_loo     = GPR.logp_loo     (x,y, y_shift, k)

      {
        val var_noise= 0.078743
        val var_func = 3.936674
        val var_cov  = 0.433610

        val p = Vec(var_cov, var_func, var_noise)

        assert( logp_marginal.gradient(p).forall(_.abs < 0.002) )
        assert{ isClose(logp_marginal(p), -37.8505, 1e-4, 1e-6) }
        assert{ isClose(logp_loo     (p), -22.6124, 1e-4, 1e-6) }
      }
      {
        val var_noise= 0.078109
        val var_func =15.455236
        val var_cov  = 0.769050

        val p = Vec(var_cov, var_func, var_noise)

        assert( logp_loo.gradient(p).forall(_.abs < 0.005) )
        assert{ isClose(logp_marginal(p), -38.8425, 1e-4, 1e-6) }
        assert{ isClose(logp_loo     (p), -21.9140, 1e-4, 1e-6) }
      }
    }
  }
}